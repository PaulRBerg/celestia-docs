"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[6032],{3905:(e,t,l)=>{l.d(t,{Zo:()=>c,kt:()=>m});var a=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function i(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(l),k=n,m=d["".concat(s,".").concat(k)]||d[k]||p[k]||r;return l?a.createElement(m,o(o({ref:t},c),{},{components:l})):a.createElement(m,o({ref:t},c))}));function m(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,o=new Array(r);o[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<r;u++)o[u]=l[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,l)}k.displayName="MDXCreateElement"},5162:(e,t,l)=>{l.d(t,{Z:()=>o});var a=l(7294),n=l(6010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:l,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(r.tabItem,o),hidden:l},t)}},4866:(e,t,l)=>{l.d(t,{Z:()=>w});var a=l(7462),n=l(7294),r=l(6010),o=l(2466),i=l(6550),s=l(1980),u=l(7392),c=l(12);function d(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:l,attributes:a,default:n}}=e;return{value:t,label:l,attributes:a,default:n}}))}function p(e){const{values:t,children:l}=e;return(0,n.useMemo)((()=>{const e=t??d(l);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,l])}function k(e){let{value:t,tabValues:l}=e;return l.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:l}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:l}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return l??null}({queryString:t,groupId:l});return[(0,s._X)(r),(0,n.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function g(e){const{defaultValue:t,queryString:l=!1,groupId:a}=e,r=p(e),[o,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:l}=e;if(0===l.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!k({value:t,tabValues:l}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${l.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=l.find((e=>e.default))??l[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,u]=m({queryString:l,groupId:a}),[d,g]=function(e){let{groupId:t}=e;const l=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(l);return[a,(0,n.useCallback)((e=>{l&&r.set(e)}),[l,r])]}({groupId:a}),b=(()=>{const e=s??d;return k({value:e,tabValues:r})?e:null})();(0,n.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!k({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var b=l(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:l,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const t=e.currentTarget,l=c.indexOf(t),a=u[l].value;a!==i&&(d(t),s(a))},k=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const l=c.indexOf(e.currentTarget)+1;t=c[l]??c[0];break}case"ArrowLeft":{const l=c.indexOf(e.currentTarget)-1;t=c[l]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},t)},u.map((e=>{let{value:t,label:l,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:k,onClick:p},o,{className:(0,r.Z)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":i===t})}),l??t)})))}function y(e){let{lazy:t,children:l,selectedValue:a}=e;if(l=Array.isArray(l)?l:[l],t){const e=l.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function f(e){const t=g(e);return n.createElement("div",{className:(0,r.Z)("tabs-container",h.tabList)},n.createElement(v,(0,a.Z)({},e,t)),n.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return n.createElement(f,(0,a.Z)({key:String(t)},e))}},464:(e,t,l)=>{l.d(t,{Z:()=>a});const a=Object.freeze({"app-latest-tag":"v1.0.0-rc7","app-latest-sha":"2ad80bc4aa1be3ddae6b417189ce58088a93c666","core-latest-tag":"v1.23.0-tm-v0.34.28","core-latest-sha":"67cc27bcb051f911c40444530f4e5257b04dd469","node-latest-tag":"v0.11.0-rc8","node-latest-sha":"e41f62662cf1844ba52d7a93d03cf79b6e363897"})},8842:(e,t,l)=>{l.d(t,{Z:()=>a});const a=Object.freeze({"app-latest-tag":"v0.13.3","app-latest-sha":"ab64b67797653e99691e846a4303bd71f44d1a8e","core-latest-tag":"v1.21.2-tm-v0.34.27","core-latest-sha":"d280f37a8376ed54ae03b10896fa25a4cbbc6d5b","node-latest-tag":"v0.10.4","node-latest-sha":"03ff94a7d779caf1225f3dccb53a68e8f1646dc6"})},578:(e,t,l)=>{l.d(t,{Z:()=>a});const a=Object.freeze({golangNodeBSR:"1.20.2",golangNodeMocha:"1.20.2",golangNodeArabica:"1.20.2",golangApp:"1.20.2",golangCore:"1.20.2",golang:"1.20.2",arabicaChainId:"arabica-9",bsrChainId:"blockspacerace-0",mochaChainId:"mocha-3",arabicaRollkitVersion:"v0.9.0",mochaRollkitVersion:"currently not compatible",bsrRollkitVersion:"v0.8.1",localCelestiaDevnetVersion:"v0.8.2",golangQGB:"1.20.2",orchrelayVersion:"v0.2.0-app-v0.13.2-beta"})},8549:(e,t,l)=>{l.d(t,{Z:()=>a});const a=Object.freeze({"app-latest-tag":"v1.0.0-rc10","app-latest-sha":"96b86ba8c0a11b1b854da1c256c5d737dbaeede3","core-latest-tag":"v1.24.0-tm-v0.34.28","core-latest-sha":"d24c81afe0ecc4ccfbb7eb543a45a11794f04db4","node-latest-tag":"v0.11.0-rc8","node-latest-sha":"e41f62662cf1844ba52d7a93d03cf79b6e363897"})},6452:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>v,frontMatter:()=>d,metadata:()=>k,toc:()=>g});var a=l(7462),n=(l(7294),l(3905)),r=l(578),o=l(8549),i=l(464),s=l(8842),u=l(4866),c=l(5162);const d={sidebar_label:"Light node",description:"This tutorial covers setting up a Celestia light node."},p="Setting up a Celestia light node",k={unversionedId:"nodes/light-node",id:"nodes/light-node",title:"Setting up a Celestia light node",description:"This tutorial covers setting up a Celestia light node.",source:"@site/docs/nodes/light-node.mdx",sourceDirName:"nodes",slug:"/nodes/light-node",permalink:"/pr-preview/pr-920/fr/nodes/light-node",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/light-node.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Light node",description:"This tutorial covers setting up a Celestia light node."},sidebar:"nodes",previous:{title:"Data availability",permalink:"/pr-preview/pr-920/fr/category/data-availability"},next:{title:"Bridge node",permalink:"/pr-preview/pr-920/fr/nodes/bridge-node"}},m={},g=[{value:"Overview of light nodes",id:"overview-of-light-nodes",level:2},{value:"Hardware requirements",id:"hardware-requirements",level:2},{value:"Setting up your light node",id:"setting-up-your-light-node",level:2},{value:"Setup the dependencies",id:"setup-the-dependencies",level:3},{value:"\ud83c\udf7a Installing Homebrew",id:"-installing-homebrew",level:4},{value:"\ud83d\uddc4 Install wget and jq",id:"-install-wget-and-jq",level:4},{value:"\ud83c\udf7a Installing Homebrew",id:"-installing-homebrew-1",level:4},{value:"\ud83d\uddc4 Install wget and jq",id:"-install-wget-and-jq-1",level:4},{value:"Install Golang",id:"install-golang",level:3},{value:"Install <code>celestia-node</code>",id:"install-celestia-node",level:3},{value:"Initialize the light node",id:"initialize-the-light-node",level:2},{value:"Start the light node",id:"start-the-light-node",level:3},{value:"Keys and wallets",id:"keys-and-wallets",level:3},{value:"Optional: run the light node with a custom key",id:"optional-run-the-light-node-with-a-custom-key",level:3},{value:"Optional: start light node with SystemD",id:"optional-start-light-node-with-systemd",level:3},{value:"Data availability sampling (DAS)",id:"data-availability-sampling-das",level:2}],b={toc:g},h="wrapper";function v(e){let{components:t,...d}=e;return(0,n.kt)(h,(0,a.Z)({},b,d,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"setting-up-a-celestia-light-node"},"Setting up a Celestia light node"),(0,n.kt)("p",null,"This tutorial will guide you through setting up a Celestia light node, which\nwill allow you to perform data availability sampling on the data\navailability (DA) network."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"To view a video tutorial for setting up a Celestia light node, click ",(0,n.kt)("a",{parentName:"p",href:"/pr-preview/pr-920/fr/developers/light-node-video"},"here"))),(0,n.kt)("h2",{id:"overview-of-light-nodes"},"Overview of light nodes"),(0,n.kt)("p",null,"Light nodes ensure data availability. This is the most common\nway to interact with the Celestia network."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"light-node",src:l(8236).Z,width:"3000",height:"1074"})),(0,n.kt)("p",null,"Light nodes have the following behavior:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"They listen for ",(0,n.kt)("inlineCode",{parentName:"li"},"ExtendedHeaders"),", i.e. wrapped \u201craw\u201d headers, that notify\nCelestia nodes of new block headers and relevant DA metadata."),(0,n.kt)("li",{parentName:"ol"},"They perform data availability sampling (DAS) on the received headers")),(0,n.kt)("h2",{id:"hardware-requirements"},"Hardware requirements"),(0,n.kt)("p",null,"The following minimum hardware requirements are recommended for running\na light node:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Memory: ",(0,n.kt)("strong",{parentName:"li"},"2 GB RAM")),(0,n.kt)("li",{parentName:"ul"},"CPU: ",(0,n.kt)("strong",{parentName:"li"},"Single Core")),(0,n.kt)("li",{parentName:"ul"},"Disk: ",(0,n.kt)("strong",{parentName:"li"},"25 GB SSD Storage")),(0,n.kt)("li",{parentName:"ul"},"Bandwidth: ",(0,n.kt)("strong",{parentName:"li"},"56 Kbps for Download/56 Kbps for Upload"))),(0,n.kt)("h2",{id:"setting-up-your-light-node"},"Setting up your light node"),(0,n.kt)("p",null,"This tutorial was performed on an Ubuntu Linux 20.04 (LTS) x64 instance machine."),(0,n.kt)("h3",{id:"setup-the-dependencies"},"Setup the dependencies"),(0,n.kt)("p",null,"First, make sure to update and upgrade the OS:"),(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"apt",label:"APT",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update && sudo apt upgrade -y\n"))),(0,n.kt)(c.Z,{value:"yum",label:"YUM",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"sudo yum update\n")))),(0,n.kt)("p",null,"These are essential packages that are necessary to execute many tasks like\ndownloading files, compiling, and monitoring the node:"),(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"apt",label:"APT",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential git make ncdu -y\n"))),(0,n.kt)(c.Z,{value:"yum",label:"YUM",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"sudo yum install curl tar wget clang pkg-config libssl-dev jq build-essential git make ncdu -y\n"))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("h4",{id:"-installing-homebrew"},"\ud83c\udf7a Installing Homebrew"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew")," is a package manager for macOS and Linux and will\nallow you to install your dependencies."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,n.kt)("p",null,"Be sure to run the commands in the output that are similar to:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/joshstein/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/joshstein/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n")),(0,n.kt)("h4",{id:"-install-wget-and-jq"},"\ud83d\uddc4 Install wget and jq"),(0,n.kt)("p",null,"Using Homebrew, in your terminal:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"brew install wget && brew install jq\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/wget"},"wget")," is an internet file retriever and\n",(0,n.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq"},"jq")," is a lightweight command-line JSON\nprocessor.")),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("h4",{id:"-installing-homebrew-1"},"\ud83c\udf7a Installing Homebrew"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew")," is a package manager for macOS and Linux and will\nallow you to install your dependencies."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,n.kt)("p",null,"Be sure to run the commands in the output that are similar to:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/joshstein/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/joshstein/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n")),(0,n.kt)("h4",{id:"-install-wget-and-jq-1"},"\ud83d\uddc4 Install wget and jq"),(0,n.kt)("p",null,"Using Homebrew, in your terminal:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"brew install wget && brew install jq\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/wget"},"wget")," is an internet file retriever and\n",(0,n.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq"},"jq")," is a lightweight command-line JSON\nprocessor."))),(0,n.kt)("h3",{id:"install-golang"},"Install Golang"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"celestia-app")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," are written in ",(0,n.kt)("a",{parentName:"p",href:"https://go.dev"},"Golang"),"\nso we must install Golang to build and run them."),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeBSR,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeBSR,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeBSR,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeBSR,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null))))),(0,n.kt)("p",null,"Now we need to add the ",(0,n.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,n.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,n.kt)(u.Z,{groupId:"shell",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,n.kt)(c.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,n.kt)("p",null,"To check if Go was installed correctly run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,n.kt)("p",null,"The output should be the version installed:"),(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeBSR," linux/amd64"))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeBSR," linux/arm64"))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeBSR," darwin/arm64"))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeBSR," darwin/amd64"))))),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null))))),(0,n.kt)("p",null,"Now we need to add the ",(0,n.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,n.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,n.kt)(u.Z,{groupId:"shell",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,n.kt)(c.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,n.kt)("p",null,"To check if Go was installed correctly run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,n.kt)("p",null,"The output should be the version installed:"),(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeMocha," linux/amd64"))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeMocha," linux/arm64"))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeMocha," darwin/arm64"))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeMocha," darwin/amd64"))))),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz"',(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,n.kt)("br",null),"cd $HOME",(0,n.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null),"sudo rm -rf /usr/local/go",(0,n.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz"',(0,n.kt)("br",null))))),(0,n.kt)("p",null,"Now we need to add the ",(0,n.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,n.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,n.kt)(u.Z,{groupId:"shell",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,n.kt)(c.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,n.kt)("p",null,"To check if Go was installed correctly run:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,n.kt)("p",null,"The output should be the version installed:"),(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeArabica," linux/amd64"))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeArabica," linux/arm64"))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeArabica," darwin/arm64"))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",null,"go version go",r.Z.golangNodeArabica," darwin/amd64")))))),(0,n.kt)("h3",{id:"install-celestia-node"},"Install ",(0,n.kt)("inlineCode",{parentName:"h3"},"celestia-node")),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the Blockspace Race testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",s.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: amd64/linux",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeBSR,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the Blockspace Race testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",s.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: arm64/linux",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeBSR,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the Blockspace Race testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make go-install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",s.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: arm64/darwin",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeBSR,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for the Blockspace Race testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",s.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make go-install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",s.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",s.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: amd64/darwin",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeBSR,(0,n.kt)("br",null)))))),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: amd64/linux",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: arm64/linux",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make go-install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: arm64/darwin",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make go-install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: amd64/darwin",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,n.kt)("br",null)))))),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)(u.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: amd64/linux",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: arm64/linux",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make go-install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: arm64/darwin",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,n.kt)("p",null,"Installing ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,n.kt)("p",null,"Install the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"cd $HOME",(0,n.kt)("br",null),"rm -rf celestia-node",(0,n.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,n.kt)("br",null),"cd celestia-node/",(0,n.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,n.kt)("br",null),"make build",(0,n.kt)("br",null),"make go-install",(0,n.kt)("br",null),"make cel-key",(0,n.kt)("br",null))),(0,n.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia version",(0,n.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,n.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,n.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,n.kt)("br",null),"System version: amd64/darwin",(0,n.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,n.kt)("br",null))))))),(0,n.kt)("h2",{id:"initialize-the-light-node"},"Initialize the light node"),(0,n.kt)("p",null,"Run the following command:"),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network blockspacerace\n")),(0,n.kt)("p",null,"You should see output like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-output"},'$ celestia light init\n2022-12-19T21:45:24.591Z        INFO    node    nodebuilder/init.go:19  Initializing Light Node Store over \'/root/.celestia-light-blockspacerace-0\'\n2022-12-19T21:45:24.591Z        INFO    node    nodebuilder/init.go:50  Saving config   {"path": "/root/.celestia-light-blockspacerace-0/config.toml"}\n2022-12-19T21:45:24.592Z        INFO    node    nodebuilder/init.go:51  Node Store initialized\n'))),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init\n")),(0,n.kt)("p",null,"You should see output like:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia light init --p2p.network mocha",(0,n.kt)("br",null),"2022-12-19T21:45:00.802Z        INFO    node    nodebuilder/init.go:19  Initializing Light Node Store over '/root/.celestia-light-",r.Z.mochaChainId,"'",(0,n.kt)("br",null),"2022-12-19T21:45:00.803Z        INFO    node    nodebuilder/init.go:50  Saving config   ",`{"path": "/root/.celestia-light-${r.Z.mochaChainId}/config.toml"}`,"`",(0,n.kt)("br",null),"2022-12-19T21:45:00.803Z        INFO    node    nodebuilder/init.go:51  Node Store initialized",(0,n.kt)("br",null)))),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network arabica\n")),(0,n.kt)("p",null,"You should see output like:"),(0,n.kt)("pre",null,(0,n.kt)("code",null,"$ celestia light init --p2p.network arabica",(0,n.kt)("br",null),"2022-12-19T21:45:00.802Z        INFO    node    nodebuilder/init.go:19  Initializing Light Node Store over '/root/.celestia-light-",r.Z.arabicaChainId,"'",(0,n.kt)("br",null),"2022-12-19T21:45:00.803Z        INFO    node    nodebuilder/init.go:50  Saving config   ",`{"path": "/root/.celestia-light-${r.Z.arabicaChainId}/config.toml"}`,"`",(0,n.kt)("br",null),"2022-12-19T21:45:00.803Z        INFO    node    nodebuilder/init.go:51  Node Store initialized",(0,n.kt)("br",null))))),(0,n.kt)("h3",{id:"start-the-light-node"},"Start the light node"),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)("p",null,"Start the light node with a connection to a validator node's gRPC endpoint (which\nis usually exposed on port 9090):"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"In order for access to the ability to get/submit\nstate-related information, such as the ability to\nsubmit ",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions, or query for the\nnode's account balance, a gRPC endpoint of a validator\n(core) node must be passed as directed below."),(0,n.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,n.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports"),"\nsection for information on which ports are\nrequired to be open on your machine.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --p2p.network <network>\n"))),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)("p",null,"Start the light node with a connection to a validator node's gRPC endpoint (which\nis usually exposed on port 9090):"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"In order for access to the ability to get/submit\nstate-related information, such as the ability to\nsubmit ",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions, or query for the\nnode's account balance, a gRPC endpoint of a validator\n(core) node must be passed as directed below."),(0,n.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,n.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports"),"\nsection for information on which ports are\nrequired to be open on your machine.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --p2p.network mocha\n"))),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)("p",null,"Start the light node with a connection to a validator node's gRPC endpoint (which\nis usually exposed on port 9090):"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"In order for access to the ability to get/submit\nstate-related information, such as the ability to\nsubmit ",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions, or query for the\nnode's account balance, a gRPC endpoint of a validator\n(core) node must be passed as directed below."),(0,n.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,n.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports"),"\nsection for information on which ports are\nrequired to be open on your machine.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --p2p.network <network>\n")))),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)("p",null,"If you need a list of RPC endpoints to connect to, you can check from the list ",(0,n.kt)("a",{parentName:"p",href:"../blockspace-race"},"here")),(0,n.kt)("p",null,"For example, your command might look something like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip rpc-blockspacerace.pops.one --p2p.network blockspacerace\n"))),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)("p",null,"If you need a list of RPC endpoints to connect to, you can check from the list ",(0,n.kt)("a",{parentName:"p",href:"../mocha-testnet#rpc-endpoints"},"here")),(0,n.kt)("p",null,"For example, your command might look something like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip rpc-mocha.pops.one --p2p.network mocha\n"))),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)("p",null,"If you need a list of RPC endpoints to connect to, you can check from the list ",(0,n.kt)("a",{parentName:"p",href:"../arabica-devnet#rpc-endpoints"},"here")),(0,n.kt)("p",null,"For example, your command might look something like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip consensus-full-arabica-9.celestia-arabica.com --p2p.network arabica\n")))),(0,n.kt)("h3",{id:"keys-and-wallets"},"Keys and wallets"),(0,n.kt)("p",null,"You can create your key for your node by running the following command with the ",(0,n.kt)("a",{parentName:"p",href:"../../developers/celestia-node-key"},(0,n.kt)("inlineCode",{parentName:"a"},"cel-key"))," utility:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type light --p2p.network <network>\n")),(0,n.kt)("p",null,"For ",(0,n.kt)("inlineCode",{parentName:"p"},"arabica"),", if you are on ",(0,n.kt)("inlineCode",{parentName:"p"},"0.6.1"),", make sure to use ",(0,n.kt)("inlineCode",{parentName:"p"},"--p2p.network arabica")," when generating your keys."),(0,n.kt)("p",null,"You can start your light node with the key created above by running the\nfollowing command:"),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --keyring.accname <key_name> --p2p.network blockspacerace\n")),(0,n.kt)("p",null,"Once you start the Light Node, a wallet key will be generated for you.\nYou will need to fund that address with testnet tokens to pay for\n",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions.")),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip rpc-mocha.pops.one --keyring.accname my_celes_key --p2p.network mocha\n")),(0,n.kt)("p",null,"Once you start the Light Node, a wallet key will be generated for you.\nYou will need to fund that address with testnet tokens to pay for\n",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions.")),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --keyring.accname my_celes_key --core.ip consensus-full-arabica-9.celestia-arabica.com --p2p.network arabica\n")),(0,n.kt)("p",null,"Once you start the Light Node, a wallet key will be generated for you.\nYou will need to fund that address with testnet tokens to pay for\n",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions."))),(0,n.kt)("p",null,"You can find the address by running the following command in the\n",(0,n.kt)("inlineCode",{parentName:"p"},"celestia-node")," directory:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key list --node.type light --keyring-backend test --p2p.network <network>\n")),(0,n.kt)("p",null,"You have three networks to get testnet tokens from:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../arabica-devnet#arabica-devnet-faucet"},"Arabica")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../mocha-testnet#mocha-testnet-faucet"},"Mocha")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../blockspace-race"},"Blockspace race"))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"NOTE: If you are running a light node for your sovereign\nrollup, it is highly recommended to request Arabica devnet tokens\nas Arabica has the latest changes that can be used to\ntest for developing your sovereign rollup. You can still use\nMocha Testnet as well, it is just used for Validator operations.")),(0,n.kt)("p",null,"You can request funds to your wallet address using the following command in Discord:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-console"},"$request <Wallet-Address>\n")),(0,n.kt)("p",null,"Where ",(0,n.kt)("inlineCode",{parentName:"p"},"<Wallet-Address>")," is the ",(0,n.kt)("inlineCode",{parentName:"p"},"celestia1******")," address generated\nwhen you created the wallet."),(0,n.kt)("h3",{id:"optional-run-the-light-node-with-a-custom-key"},"Optional: run the light node with a custom key"),(0,n.kt)("p",null,"In order to run a light node using a custom key:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The custom key must exist inside the celestia light node directory at the\ncorrect path (default: ",(0,n.kt)("inlineCode",{parentName:"li"},"~/.celestia-light/keys/keyring-test"),")"),(0,n.kt)("li",{parentName:"ol"},"The name of the custom key must be passed upon ",(0,n.kt)("inlineCode",{parentName:"li"},"start"),", like so:")),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --keyring.accname <name_of_custom_key> --p2p.network blockspacerace\n"))),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --keyring.accname <name_of_custom_key> --p2p.network mocha\n"))),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --keyring.accname <name_of_custom_key> --p2p.network arabica\n")))),(0,n.kt)("h3",{id:"optional-start-light-node-with-systemd"},"Optional: start light node with SystemD"),(0,n.kt)("p",null,"Follow the tutorial on setting up the light node as a background\nprocess with SystemD ",(0,n.kt)("a",{parentName:"p",href:"/pr-preview/pr-920/fr/nodes/systemd#celestia-light-node"},"here"),"."),(0,n.kt)("h2",{id:"data-availability-sampling-das"},"Data availability sampling (DAS)"),(0,n.kt)(u.Z,{groupId:"network",mdxType:"Tabs"},(0,n.kt)(c.Z,{value:"blockspacerace",label:"Blockspace Race",mdxType:"TabItem"},(0,n.kt)("p",null,"With your light node running, you can check out this tutorial on\nsubmitting ",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions ",(0,n.kt)("a",{parentName:"p",href:"../../developers/node-tutorial"},"here"),".")),(0,n.kt)(c.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,n.kt)("p",null,"With your light node running, you can check out this tutorial on\nsubmitting ",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions ",(0,n.kt)("a",{parentName:"p",href:"../../developers/node-tutorial"},"here"),".")),(0,n.kt)(c.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,n.kt)("p",null,"With your light node running, you can check out this tutorial on\nsubmitting ",(0,n.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions ",(0,n.kt)("a",{parentName:"p",href:"../../developers/node-tutorial"},"here"),"."))))}v.isMDXComponent=!0},8236:(e,t,l)=>{l.d(t,{Z:()=>a});const a=l.p+"assets/images/LightNodes-da13007539e843c96a8cc701b003d06e.png"}}]);